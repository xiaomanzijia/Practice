package me.student.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.student.greendao.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STUDENT.
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Studentnum = new Property(2, Boolean.class, "studentnum", false, "STUDENTNUM");
        public final static Property Phone = new Property(3, Float.class, "phone", false, "PHONE");
        public final static Property Address = new Property(4, java.util.Date.class, "address", false, "ADDRESS");
        public final static Property Teacher = new Property(5, java.util.Date.class, "teacher", false, "TEACHER");
    };


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'STUDENTNUM' INTEGER," + // 2: studentnum
                "'PHONE' REAL," + // 3: phone
                "'ADDRESS' INTEGER," + // 4: address
                "'TEACHER' INTEGER);"); // 5: teacher
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Boolean studentnum = entity.getStudentnum();
        if (studentnum != null) {
            stmt.bindLong(3, studentnum ? 1l: 0l);
        }
 
        Float phone = entity.getPhone();
        if (phone != null) {
            stmt.bindDouble(4, phone);
        }
 
        java.util.Date address = entity.getAddress();
        if (address != null) {
            stmt.bindLong(5, address.getTime());
        }
 
        java.util.Date teacher = entity.getTeacher();
        if (teacher != null) {
            stmt.bindLong(6, teacher.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // studentnum
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // address
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // teacher
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStudentnum(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setTeacher(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
